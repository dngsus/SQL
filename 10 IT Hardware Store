-- This project concerns a computer hardware and peripheral manufacturer.

-- Data source: db_dump_version_2.sql from https://codebasics.io/resources/end-to-end-sales-insights-project-using-tableau

/* SECTION A - Data cleaning and transformation: */
-- This is the only section integral to my overall project. Sections B onwards are exercises in querying the data to find insights through SQL.

/* (A.1) Renaming columns to more accurately reflect business metrics and/or typos:

alter table transactions rename column profit_margin to profit;
alter table transactions rename column profit to gross_profit;
alter table transactions rename column profit_margin_percentage to profit_margin;
alter table transactions rename column profit_margin to gross_margin;
alter table transactions rename column cost_price to cost;
alter table transactions rename column sales_amount to sale_price;
alter table customers rename column custmer_name to customer_name;
alter table markets rename column markets_code to market_code;
alter table markets rename column markets_name to market_name;

*/

/* (A.2) Mismatched currencies:

Adding an ID column to transactions so as to better identify columns in the subsequent query:

ALTER TABLE transactions ADD transaction_code int NOT NULL AUTO_INCREMENT primary key first;

Identifying transactions with the 'wrong' currency and correcting them based on historical FX figures.
From inspection, it is apparent that "sale_price" is incorrectly listed under USD, but not other columns. 
Hence the historic FX rate used may be reverse engineered. In any case, this FX_rate need not even be used to correct the figures (sales prices).

SELECT transaction_code, currency, sale_price, profit_margin, profit, cost, sales_qty FROM sales.transactions where currency = "USD";
select transaction_code, profit + cost as new_sale_price, sale_price, (profit + cost) / sale_price as FX_rate from transactions where currency = "USD";
update transactions set sale_price = 37500 where transaction_code = 135589;
update transactions set sale_price = 18750 where transaction_code = 135671;
update transactions set currency = "INR" where transaction_code in (135589, 135671);

*/

/* (A.3) Typically, gross margins are expressed as a %age:

update transactions set gross_margin = gross_margin * 100; */

/* (A.4) Adding by-quarter columns to date table for future analysis:

Alter table date add year_quarter char(7);
update date set year_quarter = concat(year, "-Q", quarter(date));
alter table date add quarter int after month_name;
update date set quarter = quarter(date);

*/

/* (A.5) Missing product_codes filled in:

insert into products values ("Prod280", "Unknown");
insert into products values ("Prod281", "Unknown");
insert into products values ("Prod282", "Unknown");
insert into products values ("Prod283", "Unknown");
insert into products values ("Prod284", "Unknown");
insert into products values ("Prod285", "Unknown");
insert into products values ("Prod286", "Unknown");
insert into products values ("Prod287", "Unknown");
insert into products values ("Prod288", "Unknown");
insert into products values ("Prod289", "Unknown");
insert into products values ("Prod290", "Unknown");
insert into products values ("Prod291", "Unknown");
insert into products values ("Prod292", "Unknown");
insert into products values ("Prod293", "Unknown");
insert into products values ("Prod294", "Unknown");
insert into products values ("Prod295", "Unknown");
insert into products values ("Prod296", "Unknown");
insert into products values ("Prod297", "Unknown");
insert into products values ("Prod298", "Unknown");
insert into products values ("Prod299", "Unknown");
insert into products values ("Prod300", "Unknown");
insert into products values ("Prod301", "Unknown");
insert into products values ("Prod302", "Unknown");
insert into products values ("Prod303", "Unknown");
insert into products values ("Prod304", "Unknown");
insert into products values ("Prod305", "Unknown");
insert into products values ("Prod306", "Unknown");
insert into products values ("Prod307", "Unknown");
insert into products values ("Prod308", "Unknown");
insert into products values ("Prod309", "Unknown");
insert into products values ("Prod310", "Unknown");
insert into products values ("Prod311", "Unknown");
insert into products values ("Prod312", "Unknown");
insert into products values ("Prod313", "Unknown");
insert into products values ("Prod314", "Unknown");
insert into products values ("Prod315", "Unknown");
insert into products values ("Prod316", "Unknown");
insert into products values ("Prod317", "Unknown");
insert into products values ("Prod318", "Unknown");
insert into products values ("Prod319", "Unknown");
insert into products values ("Prod320", "Unknown");
insert into products values ("Prod321", "Unknown");
insert into products values ("Prod322", "Unknown");
insert into products values ("Prod323", "Unknown");
insert into products values ("Prod324", "Unknown");
insert into products values ("Prod325", "Unknown");
insert into products values ("Prod326", "Unknown");
insert into products values ("Prod327", "Unknown");
insert into products values ("Prod328", "Unknown");
insert into products values ("Prod329", "Unknown");
insert into products values ("Prod330", "Unknown");
insert into products values ("Prod331", "Unknown");
insert into products values ("Prod332", "Unknown");
insert into products values ("Prod333", "Unknown");
insert into products values ("Prod334", "Unknown");
insert into products values ("Prod335", "Unknown");
insert into products values ("Prod336", "Unknown");
insert into products values ("Prod337", "Unknown");
insert into products values ("Prod338", "Unknown");
insert into products values ("Prod339", "Unknown");

*/

/* (A.6) Renaming a location to better suit Power BI geo-detection:

update markets set market_name = "Delhi" where market_name = "Delhi NCR"; */

/* (A.8) Correcting locations to avoid splitting of a single cities data across two recorded locations:

update transactions set market_code = "Mark007" where market_code = "Mark013";
delete from markets where market_code = "Mark013"; */

/* (A.8) Removing unused locations:

delete from markets where market_name = "New York" or market_name = "Paris"; */

/* (A.9) Adding latitudes and longitudes for Power BI visuals:

alter table markets add latitude_city double;
update markets set latitude_city = 13.08268 where market_name = "Chennai";
update markets set latitude_city = 19.075983 where market_name = "Mumbai";
update markets set latitude_city = 23.022505 where market_name = "Ahmedabad";
update markets set latitude_city = 28.70406 where market_name = "Delhi";
update markets set latitude_city = 26.46523 where market_name = "Kanpur";
update markets set latitude_city = 12.97194 where market_name = "Bengaluru";
update markets set latitude_city = 23.25469 where market_name = "Bhopal";
update markets set latitude_city = 26.83928 where market_name = "Lucknow";
update markets set latitude_city = 25.59408 where market_name = "Patna";
update markets set latitude_city = 9.93697 where market_name = "Kochi";
update markets set latitude_city = 21.14631 where market_name = "Nagpur";
update markets set latitude_city = 21.19594 where market_name = "Surat";
update markets set latitude_city = 17.38405 where market_name = "Hyderabad";
update markets set latitude_city = 20.27241 where market_name = "Bhubaneshwar";

alter table markets add longitude_city double;
update markets set longitude_city = 80.27847 where market_name = "Chennai";
update markets set longitude_city = 72.88261 where market_name = "Mumbai";
update markets set longitude_city = 72.58727 where market_name = "Ahmedabad";
update markets set longitude_city = 77.23149 where market_name = "Delhi";
update markets set longitude_city = 80.34975 where market_name = "Kanpur";
update markets set longitude_city = 77.59369 where market_name = "Bengaluru";
update markets set longitude_city = 77.40289 where market_name = "Bhopal";
update markets set longitude_city = 80.92313 where market_name = "Lucknow";
update markets set longitude_city = 85.13563 where market_name = "Patna";
update markets set longitude_city = 76.2603 where market_name = "Kochi";
update markets set longitude_city = 79.08491 where market_name = "Nagpur";
update markets set longitude_city = 72.83023 where market_name = "Surat";
update markets set longitude_city = 78.45636 where market_name = "Hyderabad";
update markets set longitude_city = 85.83385 where market_name = "Bhubaneshwar";

-- Zone lats and longs are just the average lats and longs of constituent cities

alter table markets add lat_long_zone varchar(24);
update markets set lat_long_zone = "21.15899433, 76.45680333" where zone = "Central";
update markets set lat_long_zone = "25.29363917, 78.17625" where zone = "North";
update markets set lat_long_zone = "14.72961, 79.684534" where zone = "South";

*/

/* SECTION B - Exploring revenues: */

/* (B.1) Revenues over time : */

/* (B.1.01) Overall: */

SELECT 
    SUM(sale_price) AS total_rev_to_date
FROM
    transactions;

/* (B.1.02) By year: */

select sum(sale_price) as total_rev,
year(order_date) as year,
rank() over(order by sum(sale_price) desc) as rev_rank from transactions
group by 2
order by 2;

/* (B.1.03) By year-quarter: */

select year_quarter, sum(sale_price) as total_rev,
rank() over(order by sum(sale_price)) as overall_rev_rank,
quarter(order_date) as quarter,
year(order_date) as year,
rank() over(partition by left(year_quarter, 4) order by sum(sale_price)) as within_year_rank
from transactions t join date d on t.order_date = d.date group by 1, 4, 5 order by 1;

-- Check, knowing all orders in 2017 occured in Q4:

select sum(sale_price) as total_rev_2017_Q4 from transactions t join date d on t.order_date = d.date where year(order_date) = 2017;

/* (B.1.04) By aggregated quarter: */

with temp as
	(select quarter,
    count(distinct year_quarter) as occurences_of_quarter
    from date
    group by 1)
    
select quarter,
sum(sale_price) as total_rev,
rank() over(order by sum(sale_price) desc) as overall_rev_rank,
occurences_of_quarter,
(sum(sale_price) / occurences_of_quarter) as avg_rev,
rank() over(order by (sum(sale_price) / occurences_of_quarter) desc) as avg_rev_rank
from
	temp join transactions t on temp.quarter = quarter(t.order_date)
group by 1
order by 1;

-- Possibly, distinctly stronger revenues in Q1 and Q4 vs Q2  and Q3


/* (B.2) Revenues by customer: */

/* (B.2.01) Overall: */

SELECT 
    c.customer_code, customer_name, SUM(sale_price) AS spend, rank() over(order by sum(sale_price) desc) as spend_rank
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 4;

/* (B.2.01a) Overall - Top 5 customers by spending: */

SELECT 
    c.customer_code, customer_name, SUM(sale_price) AS spend
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3 DESC
LIMIT 5;

/* (B.2.01b) Overall - Bottom 5 customers by spending: */

SELECT 
    c.customer_code, customer_name, SUM(sale_price) AS spend
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3
LIMIT 5;

/* (B.2.02) By customer_type: */

SELECT 
    customer_type,
    SUM(sale_price) AS total_spend,
    COUNT(DISTINCT c.customer_name) AS num_estab,
    SUM(sale_price) / COUNT(DISTINCT c.customer_name) AS avg_spend_per_estab
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1
ORDER BY 2 DESC;



/* (B.3) Revenues by markets (geography): */

/* (B.3.01) Overall: */

SELECT 
    m.market_name, SUM(sale_price) AS spend, rank() over(order by sum(sale_price) desc) as spend_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code= t.market_code
GROUP BY 1
ORDER BY 3;

/* (B.3.02) By zone: */

SELECT 
    zone,
    SUM(sale_price) AS total_spend,
    rank() over (order by SUM(sale_price) desc) as total_spend_rank,
    COUNT(DISTINCT m.market_name) AS num_cities,
    SUM(sale_price) / COUNT(DISTINCT m.market_name) AS spend_per_city,
    rank() over (order by SUM(sale_price) / COUNT(DISTINCT m.market_name) desc) as avg_spend_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code = t.market_code
GROUP BY 1
ORDER BY 2 DESC;



/* (B.4) Revenues by product: */

/* (B.4.01) Overall: */

SELECT 
    p.product_code, SUM(sale_price) AS rev, rank() over(order by sum(sale_price) desc) as rev_rank
FROM
    products p
        JOIN
    transactions t ON p.product_code= t.product_code
GROUP BY 1
ORDER BY 3;

/* (B.4.01a) Overall - Top 5 products by revenue: */

SELECT 
     p.product_code, SUM(sale_price) AS rev
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
 DESC
LIMIT 5;

/* (B.4.01b) Overall - Bottom 5 products by revenue: */

SELECT 
     p.product_code, SUM(sale_price) AS rev
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
LIMIT 5;

/* (B.4.02) By product_type: */

SELECT 
    product_type,
    SUM(sale_price) AS total_rev,
    COUNT(DISTINCT p.product_code) AS num_prods,
    SUM(sale_price) / COUNT(DISTINCT p.product_code) AS rev_per_prod
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2 DESC;




/* SECTION C - Exploring activity (number of sales): */

/* (C.1) Activity over time: */ 

/* (C.1.01) Overall: */

select count(transaction_code) as num_trans from transactions;

/* (C.1.02) By year: */

select count(transaction_code) as num_trans,
year(order_date),
rank() over(order by count(transaction_code) desc) as trans_rank
from transactions
group by 2
order by 2;

/* (C.1.03) By year-quarter: */

select year_quarter,
count(transaction_code) as num_trans,
rank() over(order by count(transaction_code) desc) as overall_trans_rank,
year(order_date) as year,
quarter(order_date) as quarter,
rank() over(partition by left(year_quarter, 4) order by count(transaction_code) desc) as within_year_rank
from transactions t join date d on t.order_date = d.date group by 1, 4, 5 order by 1;

-- Check, knowing all orders in 2017 occured in Q4:

SELECT 
    COUNT(transaction_code) AS total_trans_2017_Q4
FROM
    transactions t
        JOIN
    date d ON t.order_date = d.date
WHERE
    YEAR(order_date) = 2017;

/* (C.1.04) By aggregated quarter: */

with temp as
	(select quarter,
    count(distinct year_quarter) as occurences_of_quarter
    from date
    group by 1)
    
select quarter,
count(transaction_code)  as total_trans,
rank() over(order by count(transaction_code) desc) as overall_trans_rank,
occurences_of_quarter,
(count(transaction_code)  / occurences_of_quarter) as avg_trans,
rank() over(order by (count(transaction_code)  / occurences_of_quarter) desc) as avg_trans_rank
from
	temp join transactions t on temp.quarter = quarter(t.order_date)
group by 1
order by 1;

-- Distinctly higher activity Q1 and Q4 vs Q2 and Q3


/* (C.2) Activity by customer: */

/* (C.2.01) Overall: */

SELECT 
    c.customer_code, customer_name, count(transaction_code) AS num_trans, rank() over(order by count(transaction_code) desc) as trans_rank
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 4;

/* (C.2.01a) Overall - Top 5 customers by activity: */

SELECT 
    c.customer_code, customer_name, count(transaction_code) AS trans
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3 DESC
LIMIT 5;

/* (C.2.01b) Overall - Bottom 5 customers by activity: */

SELECT 
    c.customer_code,
    customer_name,
    COUNT(transaction_code) AS trans
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3
LIMIT 5;

/* (C.2.02) By customer_type: */

SELECT 
    customer_type,
    count(transaction_code) AS total_trans,
    COUNT(DISTINCT c.customer_name) AS num_estab,
    count(transaction_code) / COUNT(DISTINCT c.customer_name) AS avg_trans_per_estab
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1
ORDER BY 2 DESC;



/* (C.3) Activity by markets (geography): */

/* (C.3.01) Overall: */

SELECT 
    m.market_name, count(transaction_code) AS num_trans, rank() over(order by count(transaction_code) desc) as trans_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code= t.market_code
GROUP BY 1
ORDER BY 3;

/* (C.3.02) By zone: */

SELECT 
    zone,
    count(transaction_code) AS num_trans,
    rank() over (order by count(transaction_code)desc) as total_trans_rank,
    COUNT(DISTINCT m.market_name) AS num_cities,
    count(transaction_code) / COUNT(DISTINCT m.market_name) AS trans_per_city,
    rank() over (order by (count(transaction_code)) / COUNT(DISTINCT m.market_name) desc) as avg_trans_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code = t.market_code
GROUP BY 1
ORDER BY 2 DESC;


/* (C.4) Activity by product: */

/* (C.4.01) Overall: */

SELECT 
    p.product_code, count(transaction_code) AS num_purchases, rank() over(order by count(transaction_code) desc) as purchase_rank
FROM
    products p
        JOIN
    transactions t ON p.product_code= t.product_code
GROUP BY 1
ORDER BY 3;

/* (C.4.01a) Overall - Top 5 products by activity: */

SELECT 
     p.product_code, count(transaction_code) AS num_purchases
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
 DESC
LIMIT 5;

/* (C.4.01b) Overall - Bottom 5 products by activity: */

SELECT 
     p.product_code, count(transaction_code) AS num_purchases
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
LIMIT 5;

/* (C.4.02) By product_type: */

SELECT 
    product_type,
    count(transaction_code) AS num_purchases,
    COUNT(DISTINCT p.product_code) AS num_prods,
    count(transaction_code) / COUNT(DISTINCT p.product_code) AS purchases_per_prod
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2 DESC;



/* SECTION D - Exploring revenue per transaction = spend per transaction: */

/* (D.1) Rev/trans over time: */ 

/* (D.1.01) Overall: */

SELECT 
    SUM(sale_price) / COUNT(transaction_code) AS rev_per_trans_to_date
FROM
    transactions;

/* (D.1.02) By year: */

select year(order_date), sum(sale_price) / count(transaction_code) as rev_per_trans,
rank() over(order by sum(sale_price) / count(transaction_code) desc) as metric_rank
from transactions
group by 1
order by 1;

/* (D.1.03) By year-quarter: */

select year_quarter,
sum(sale_price) / count(transaction_code) as rev_per_trans,
rank() over(order by sum(sale_price) / count(transaction_code) desc) as overall_rank,
year(order_date) as year,
quarter(order_date) as quarter,
rank() over(partition by left(year_quarter, 4) order by sum(sale_price) / count(transaction_code) desc) as within_year_rank
from transactions t join date d on t.order_date = d.date group by 1, 4, 5 order by 1;

-- Check, knowing all orders in 2017 occured in Q4:

select sum(sale_price) / count(transaction_code) as metric_2017_Q4 from transactions t join date d on t.order_date = d.date where year(order_date) = 2017;

/* (D.1.04) By aggregated quarter: */

with temp as
	(select quarter,
    count(distinct year_quarter) as occurences_of_quarter,
    sum(sale_price) / count(transaction_code) as rev_per_trans
    from date d join transactions t on d.date = t.order_date
    group by 1)
    
select quarter,
avg(rev_per_trans)  as rev_per_trans,
rank() over(order by rev_per_trans desc) as overall_rank,
occurences_of_quarter,
(rev_per_trans / occurences_of_quarter) as avg_per_quarter,
rank() over(order by (rev_per_trans / occurences_of_quarter) desc) as per_quarter_rank
from
	temp --  transactions t on temp.quarter = quarter(t.order_date)
group by 1
order by 1;


/* (D.2) Spend/trans by customer: */

/* (D.2.01) Overall: */

SELECT 
    c.customer_code,
    customer_name, 
    sum(sale_price) / count(transaction_code) AS spend_per_trans,
    rank() over(order by  sum(sale_price) / count(transaction_code) desc) as metric_rank
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 4;

/* (D.2.01a) Overall - Top 5 customers by spend/trans: */

SELECT 
    c.customer_code, customer_name,  sum(sale_price) / count(transaction_code) AS spend_per_trans
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3 DESC
LIMIT 5;

/* (D.2.01b) Overall - Bottom 5 customers by spend/trans: */

SELECT 
    c.customer_code,
    customer_name,
    sum(sale_price) / count(transaction_code) AS spend_per_trans
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3
LIMIT 5;

/* (D.2.02) By customer_type: */

SELECT 
    customer_type,
    sum(sale_price) / count(transaction_code) AS spend_per_trans,
    COUNT(DISTINCT c.customer_name) AS num_estab,
    (sum(sale_price) / count(transaction_code)) / COUNT(DISTINCT c.customer_name) AS avg_per_estab
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1
ORDER BY 2 DESC;


/* (D.3) Spend/trans by markets (geography): */

/* (D.3.01) Overall: */

SELECT 
    m.market_name, sum(sale_price) / count(transaction_code) AS spend_per_trans, rank() over(order by (sum(sale_price) / count(transaction_code)) desc) as metric_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code= t.market_code
GROUP BY 1
ORDER BY 3;



/* (D.3.02) By zone: */

SELECT 
    zone,
    sum(sale_price) / count(transaction_code) AS spend_per_trans,
    rank() over (order by sum(sale_price) / count(transaction_code) desc) as overall_metric_rank,
    COUNT(DISTINCT m.market_name) AS num_cities,
    (sum(sale_price) / count(transaction_code)) / COUNT(DISTINCT m.market_name) AS metric_per_city,
    rank() over (order by ((sum(sale_price) / count(transaction_code)) / COUNT(DISTINCT m.market_name)) desc) as per_city_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code = t.market_code
GROUP BY 1
ORDER BY 2 DESC;




/* (D.4) Rev/trans by product: */

-- For the sake of practice, listed below. However, commented out as it does not make obvious sense as a metric, since it involves an interaction with price.
-- I.e. To accumulate the same revenue per transaction as a more pricey item, a relatively cheap item must be purchased in multiples. However, there is no natural law to generally encourage cheaper products be purchased in multiples.

/* (D.4.01) Overall: */

/* SELECT 
    p.product_code, sum(sale_price) / count(transaction_code) AS rev_per_trans, rank() over(order by (sum(sale_price) / count(transaction_code)) desc) as metric_rank
FROM
    products p
        JOIN
    transactions t ON p.product_code= t.product_code
GROUP BY 1
ORDER BY 3; */

/* (D.4.01a) Overall - Top 5 products by rev/trans: */

/* SELECT 
     p.product_code, sum(sale_price) / count(transaction_code) AS rev_per_trans
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
 DESC
LIMIT 5; */

/* (D.4.01b) Overall - Bottom 5 products by rev/trans: */

/* SELECT 
     p.product_code, sum(sale_price) / count(transaction_code) AS rev_per_trans
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
LIMIT 5; */

/* (D.4.02) By product_type: */

/* SELECT 
    product_type,
    sum(sale_price) / count(transaction_code) AS rev_per_trans,
    COUNT(DISTINCT p.product_code) AS num_prods,
    (sum(sale_price) / count(transaction_code)) / COUNT(DISTINCT p.product_code) AS metric_per_prod
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2 DESC; */



/* SECTION E - Exploring profit: */

/* (E.1) Profit  over time: */ 

/* (E.1.01) Overall: */

SELECT 
    SUM(gross_profit) AS profit_to_date
FROM
    transactions;

/* (E.1.02) By year: */

select sum(gross_profit) as profit,
year(order_date),
rank() over(order by sum(gross_profit) desc) as profit_rank
from transactions
group by 2
order by 2;

/* (E.1.03) By year-quarter: */

select year_quarter,
sum(gross_profit) as profit,
rank() over(order by sum(gross_profit) desc) as overall_profit_rank,
year(order_date) as year,
quarter(order_date) as quarter,
rank() over(partition by left(year_quarter, 4) order by sum(gross_profit) desc) as within_year_rank
from transactions t join date d on t.order_date = d.date group by 1, 4, 5 order by 1;

-- Check, knowing all orders in 2017 occured in Q4:

SELECT 
    SUM(gross_profit) AS total_proft_2017_Q4
FROM
    transactions t
        JOIN
    date d ON t.order_date = d.date
WHERE
    YEAR(order_date) = 2017;

/* (E.1.04) By aggregated quarter: */

with temp as
	(select quarter,
    count(distinct year_quarter) as occurences_of_quarter
    from date
    group by 1)
    
select quarter,
sum(gross_profit)  as profit,
rank() over(order by sum(gross_profit) desc) as overall_profit_rank,
occurences_of_quarter,
(sum(gross_profit) / occurences_of_quarter) as avg_profit,
rank() over(order by (sum(gross_profit)  / occurences_of_quarter) desc) as avg_profit_rank
from
	temp join transactions t on temp.quarter = quarter(t.order_date)
group by 1
order by 1;


/* (E.2) Profit by customer: */

/* (E.2.01) Overall: */

SELECT 
    c.customer_code, customer_name, sum(gross_profit) as profit, rank() over(order by sum(gross_profit) desc) as profit_rank
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 4;

/* (E.2.01a) Overall - Top 5 customers by profit: */

SELECT 
    c.customer_code, customer_name, sum(gross_profit) as profit
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3 DESC
LIMIT 5;

/* (E.2.01b) Overall - Bottom 5 customers by profit: */

SELECT 
    c.customer_code,
    customer_name,
    sum(gross_profit) as profit
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3
LIMIT 5;

/* (E.2.02) By customer_type: */

SELECT 
    customer_type,
    sum(gross_profit) as overall_profit,
    COUNT(DISTINCT c.customer_name) AS num_estab,
    sum(gross_profit) / COUNT(DISTINCT c.customer_name) AS profit_per_estab
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1
ORDER BY 2 DESC;


/* (E.3) Profit by markets (geography): */

/* (E.3.01) Overall: */

SELECT 
    m.market_name, sum(gross_profit) as profit, rank() over(order by sum(gross_profit) desc) as profit_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code= t.market_code
GROUP BY 1
ORDER BY 3;

/* (E.3.02) By zone: */

SELECT 
    zone,
    sum(gross_profit) as profit,
    rank() over (order by sum(gross_profit) desc) as overall_profit_rank,
    COUNT(DISTINCT m.market_name) AS num_cities,
    sum(gross_profit) / COUNT(DISTINCT m.market_name) AS profit_per_city,
    rank() over (order by (sum(gross_profit)) / COUNT(DISTINCT m.market_name) desc) as per_city_profit_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code = t.market_code
GROUP BY 1
ORDER BY 2 DESC;


/* (E.4) Profit by product: */

/* (E.4.01) Overall: */

SELECT 
    p.product_code, sum(gross_profit) as profit, rank() over(order by sum(gross_profit) desc) as profit_rank
FROM
    products p
        JOIN
    transactions t ON p.product_code= t.product_code
GROUP BY 1
ORDER BY 3;

/* (E.4.01a) Overall - Top 5 products by profit: */

SELECT 
     p.product_code, sum(gross_profit) as profit
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
 DESC
LIMIT 5;

/* (E.4.01b) Overall - Bottom 5 products by profit: */

SELECT 
     p.product_code, sum(gross_profit) as profit
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
LIMIT 5;

/* (E.4.02) By product_type: */

SELECT 
    product_type,
    sum(gross_profit) as profit,
    COUNT(DISTINCT p.product_code) AS num_prods,
    sum(gross_profit) / COUNT(DISTINCT p.product_code) AS profit_per_prod
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2 DESC;



/* SECTION F - Exploring profit margins (%).
Note: profit margin (PM) per grouping is not avg of PMs within said category i.e. "avg(profit_margin) from xx where yy".
Rather, it is the profit margin calculation at a group-aggregate level, i.e. "[sum(revs) - sum(cogs)] / sum(revs) = [group-level gross profit] / [group-level revenue] = [sum of individual gross profits] / [sum of individual revs] */

/* (F.1) Profit margin over time: */ 

/* (F.1.01) Overall: */

select sum(gross_profit) / sum(sale_price) * 100 as prof_marg_to_date from transactions;

/* (F.1.02) By year: */

select (sum(gross_profit) / sum(sale_price) * 100) as prof_marg,
year(order_date),
rank() over(order by (sum(gross_profit) / sum(sale_price) * 100) desc) as profit_rank
from transactions
group by 2
order by 2;


/* (F.1.03) By year-quarter: */

select year_quarter,
(sum(gross_profit) / sum(sale_price) * 100) as prof_marg,
rank() over(order by (sum(gross_profit) / sum(sale_price) * 100) desc) as overall_prof_marg_rank,
year(order_date) as year,
quarter(order_date) as quarter,
rank() over(partition by left(year_quarter, 4) order by (sum(gross_profit) / sum(sale_price) * 100) desc) as within_year_rank
from transactions t join date d on t.order_date = d.date group by 1, 4, 5 order by 1;

-- Check, knowing all orders in 2017 occured in Q4:

select (sum(gross_profit) / sum(sale_price) * 100) as prof_marg_2017_Q4 from transactions t join date d on t.order_date = d.date where year(order_date) = 2017;

/* (F.1.04) By aggregated quarter: */

select quarter,
(sum(gross_profit) / sum(sale_price) * 100) as prof_marg,
rank() over(order by (sum(gross_profit) / sum(sale_price) * 100) desc) as prof_marg_rank
from transactions t join date d on t.order_date = d.date
group by 1
order by 1;



/* (F.2) Profit margin by customer: */

/* (F.2.01) Overall: */

SELECT 
    c.customer_code, customer_name, (sum(gross_profit) / sum(sale_price) * 100) as prof_marg, rank() over(order by (sum(gross_profit) / sum(sale_price) * 100) desc) as prof_marg_rank
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 4;

/* (F.2.01a) Overall - Top 5 customers by profit margin: */

SELECT 
    c.customer_code, customer_name, (sum(gross_profit) / sum(sale_price) * 100) as prof_marg
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3 DESC
LIMIT 5;

/* (F.2.01b) Overall - Bottom 5 customers by profit margin: */

SELECT 
    c.customer_code,
    customer_name,
    (sum(gross_profit) / sum(sale_price) * 100) as prof_marg,
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1 , 2
ORDER BY 3
LIMIT 5;

/* (F.2.02) By customer_type: */

SELECT 
    customer_type,
    (sum(gross_profit) / sum(sale_price) * 100) as type_prof_marg
FROM
    customers c
        JOIN
    transactions t ON c.customer_code = t.customer_code
GROUP BY 1
ORDER BY 2 DESC;



/* (F.3) Profit margin by markets (geography): */

/* (F.3.01) Overall: */

SELECT 
    m.market_name, (sum(gross_profit) / sum(sale_price) * 100) as prof_marg, rank() over(order by (sum(gross_profit) / sum(sale_price) * 100) desc) as prof_marg_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code= t.market_code
GROUP BY 1
ORDER BY 3;

/* (F.3.02) By zone: */

SELECT 
    zone,
    (sum(gross_profit) / sum(sale_price) * 100) as prof_marg,
    rank() over (order by (sum(gross_profit) / sum(sale_price) * 100)desc) as prof_marg_rank
FROM
    markets m
        JOIN
    transactions t ON m.market_code = t.market_code
GROUP BY 1
ORDER BY 2 DESC;


/* (F.4) Profit margin by product: */

/* (F.4.01) Overall: */

SELECT 
    p.product_code, (sum(gross_profit) / sum(sale_price) * 100) as prof_marg, rank() over(order by (sum(gross_profit) / sum(sale_price) * 100) desc) as prof_marg_rank
FROM
    products p
        JOIN
    transactions t ON p.product_code= t.product_code
GROUP BY 1
ORDER BY 3;

/* (F.4.01a) Overall - Top 5 products by profit margin: */

SELECT 
     p.product_code, (sum(gross_profit) / sum(sale_price) * 100) as prof_marg
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
 DESC
LIMIT 5;

/* (F.4.01b) Overall - Bottom 5 products by profit margin: */

SELECT 
     p.product_code, (sum(gross_profit) / sum(sale_price) * 100) as prof_marg
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2
LIMIT 5;

/* (F.4.02) By product_type: */

SELECT 
    product_type,
    (sum(gross_profit) / sum(sale_price) * 100) as prof_marg
FROM
    products p
        JOIN
    transactions t ON p.product_code = t.product_code
GROUP BY 1
ORDER BY 2 DESC;
